---
- name: Get current timezone
  ansible.builtin.command: timedatectl show --property=Timezone --value
  register: timezone_output
  changed_when: false

- name: Get existing of a docker network
  docker_network_info:
    name: "{{ docker_network }}"
  register: docker_network_result

- name: Add a separate docker network
  docker_network:
    name: "{{ docker_network }}"
  when: not docker_network_result.exists

- name: Create temporary build directory
  tempfile:
    state: directory
    suffix: build
  register: docker_temp_directory

- name: Working in a build directory
  block:
    - name: Prepare Dockerfile
      template:
        dest: "{{ docker_temp_directory.path }}/Dockerfile"
        src: "Dockerfile.j2"

    - name: Create volume directory for a container
      file:
        path: "{{ docker_lib_folder }}/{{ item.value.path }}"
        recurse: yes
        state: directory
      become: yes
      with_dict: "{{ docker_volumes }}"

    - name: Copy req.txt for building a docker image
      copy:
        dest: "{{ docker_temp_directory.path }}/prod.txt"
        src: "../../../../requirements/prod.txt"

    - name: Copy sources
      synchronize:
        dest: "{{ docker_lib_folder }}/{{ docker_volumes['sources']['path'] }}"
        src: "../../../../sources/"
        owner: false
        group: false
      become: yes

    - name: Build a docker image
      docker_image:
        name: "discord-meow-bot"
        force_source: yes
        build:
          path: "{{ docker_temp_directory.path }}"
          pull: yes
          network: host
        source: build
      become: yes

    - name: Up a docker container with PostgreSQL
      docker_container:
        name: "postgres"
        image: "postgres:17"
        pull: yes
        restart_policy: always
        restart: yes
        mounts:
          - source: "{{ docker_lib_folder }}/{{ docker_volumes['postgres']['path'] }}"
            target: "/var/lib/postgresql/data"
            type: bind
        networks:
          - name: "{{ docker_network }}"
        env:
          POSTGRES_PASSWORD: "{{ db_password }}"
      become: yes
      tags:
        - postgres

    - name: Up a docker container with the bot
      docker_container:
        name: "discord-meow-bot"
        image: "discord-meow-bot"
        state: started
        restart_policy: always
        restart: yes
        command: |
          -c "venv/bin/python3 sources/scripts/create_db.py &&
          venv/bin/alembic -c sources/alembic.ini upgrade head &&
          venv/bin/python3 sources/scripts/main.py"
        mounts:
          - source: "{{ docker_lib_folder }}/{{ docker_volumes['sources']['path'] }}"
            target: "/code/sources"
            read_only: yes
            type: bind
        networks:
          - name: "{{ docker_network }}"
        env:
          DISCORD_TOKEN: "{{ discord_token }}"
          DB_LOGIN: "{{ db_login }}"
          DB_PASSWORD: "{{ db_password }}"
          DB_HOST: "{{ db_host }}"
          DB_DATABASE: "{{ db_database }}"
          DB_PORT: "{{ db_port | string }}"
      become: yes

  always:
    - name: Remove temp build direcotry
      file:
        path: "{{ docker_temp_directory.path }}"
        state: absent
...
